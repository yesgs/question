package q0012

import "strings"

//罗马数字包含以下七种字符：I，V，X，L，C，D和M。
//
//字符          数值
//I             1
//V             5
//X             10
//L             50
//C             100
//D             500
//M             1000

//通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做IIII，而是IV。
//数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。
//同样地，数字 9 表示为IX。这个特殊的规则只适用于以下六种情况：

//I可以放在V(5) 和X(10) 的左边，来表示 4 和 9。
//X可以放在L(50) 和C(100) 的左边，来表示 40 和90。
//C可以放在D(500) 和M(1000) 的左边，来表示400 和900。
//
//示例1:
//
//输入:num = 3
//输出: "III"
//示例2:
//
//输入:num = 4
//输出: "IV"
//示例3:
//
//输入:num = 9
//输出: "IX"
//示例4:
//
//输入:num = 58
//输出: "LVIII"
//解释: L = 50, V = 5, III = 3.
//示例5:
//
//输入:num = 1994
//输出: "MCMXCIV"
//解释: M = 1000, CM = 900, XC = 90, IV = 4.

//1 <= num <= 3999

func intToRoman(num int) string {
	N := []string{"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"}
	n := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}

	//由题可知 固定符号
	//1000 = "M"
	//500 = "D"
	//100 = "C"
	//50 = "L"
	//10 = "X"
	//5 = "V"
	//1 = "I"

	//由题可知 特殊处理的符号
	//900 = "CM"
	//400 = "CD"

	//90 = "XC"
	//40 = "XL"

	//9 = "IX"
	//4 = "IV"

	var ret = ""

	for i := 0; i < len(n); i++ {
		if num >= n[i] {
			count := num / n[i]
			num = num - n[i]*count
			ret = ret + strings.Repeat(N[i], count)
		}
	}
	return ret
}
